{"version":3,"file":"commonHelpers2.js","sources":["../src/js/form/utilities.js","../src/js/2-form.js"],"sourcesContent":["export const updateLocalStorageField = (localStorage, name, value, localStorageFieldsKey) => {\n  const localStorageFormFields = localStorage.getItem(localStorageFieldsKey);\n  const localStorageFormFieldsData = localStorageFormFields ? JSON.parse(localStorageFormFields) : {};\n\n  if (localStorageFormFieldsData[name] === value) return;\n\n  if (!value) {\n    delete localStorageFormFieldsData[name];\n  } else {\n    localStorageFormFieldsData[name] = value;\n  }\n\n  if (Object.keys(localStorageFormFieldsData).length === 0) {\n    localStorage.removeItem(localStorageFieldsKey);\n  } else {\n    localStorage.setItem(localStorageFieldsKey, JSON.stringify(localStorageFormFieldsData));\n  }\n}\n\nexport const areAllFieldsFilled = form => {\n  const inputs = form.querySelectorAll('input, textarea');\n\n  return !Array.from(inputs).some(element => element.value.trim() === '');\n}","import * as formUtilities from './form/utilities.js';\n\nconst localStorageFieldsKey = 'feedback-form-state';\n\ndocument.addEventListener('DOMContentLoaded', event => {\n  const formEl = document.querySelector('form.feedback-form');\n\n  if (!formEl) return;\n\n  const localStorage = window.localStorage;\n  let localStorageFormFields = localStorage.getItem(localStorageFieldsKey);\n\n  if (localStorageFormFields) {\n    localStorageFormFields = JSON.parse(localStorageFormFields);\n\n    Object.keys(localStorageFormFields).forEach(key => {\n      if (!formEl.elements[key]) return;\n\n      formEl.elements[key].value = localStorageFormFields[key];\n    });\n  }\n\n  formEl.addEventListener('input', event => {\n    const currentElement = event.target;\n\n    if (!currentElement.matches('input, textarea')) return;\n\n    const currentElementName = currentElement.name;\n    const currentElementValue = currentElement.value;\n\n    formUtilities.updateLocalStorageField(localStorage, currentElementName, currentElementValue, localStorageFieldsKey);\n  });\n\n  formEl.addEventListener('submit', event => {\n    event.preventDefault();\n\n    if (!formUtilities.areAllFieldsFilled(formEl)) {\n      alert('Fill please all fields');\n      return;\n    }\n\n    localStorage.removeItem(localStorageFieldsKey);\n\n    formEl.reset();\n  });\n});"],"names":["updateLocalStorageField","localStorage","name","value","localStorageFieldsKey","localStorageFormFields","localStorageFormFieldsData","areAllFieldsFilled","form","inputs","element","event","formEl","key","currentElement","currentElementName","currentElementValue","formUtilities.updateLocalStorageField","formUtilities.areAllFieldsFilled"],"mappings":"oCAAO,MAAMA,EAA0B,CAACC,EAAcC,EAAMC,EAAOC,IAA0B,CAC3F,MAAMC,EAAyBJ,EAAa,QAAQG,CAAqB,EACnEE,EAA6BD,EAAyB,KAAK,MAAMA,CAAsB,EAAI,GAE7FC,EAA2BJ,CAAI,IAAMC,IAEpCA,EAGHG,EAA2BJ,CAAI,EAAIC,EAFnC,OAAOG,EAA2BJ,CAAI,EAKpC,OAAO,KAAKI,CAA0B,EAAE,SAAW,EACrDL,EAAa,WAAWG,CAAqB,EAE7CH,EAAa,QAAQG,EAAuB,KAAK,UAAUE,CAA0B,CAAC,EAE1F,EAEaC,EAAqBC,GAAQ,CACxC,MAAMC,EAASD,EAAK,iBAAiB,iBAAiB,EAEtD,MAAO,CAAC,MAAM,KAAKC,CAAM,EAAE,KAAKC,GAAWA,EAAQ,MAAM,KAAM,IAAK,EAAE,CACxE,ECrBMN,EAAwB,sBAE9B,SAAS,iBAAiB,mBAAoBO,GAAS,CACrD,MAAMC,EAAS,SAAS,cAAc,oBAAoB,EAE1D,GAAI,CAACA,EAAQ,OAEb,MAAMX,EAAe,OAAO,aAC5B,IAAII,EAAyBJ,EAAa,QAAQG,CAAqB,EAEnEC,IACFA,EAAyB,KAAK,MAAMA,CAAsB,EAE1D,OAAO,KAAKA,CAAsB,EAAE,QAAQQ,GAAO,CAC5CD,EAAO,SAASC,CAAG,IAExBD,EAAO,SAASC,CAAG,EAAE,MAAQR,EAAuBQ,CAAG,EAC7D,CAAK,GAGHD,EAAO,iBAAiB,QAASD,GAAS,CACxC,MAAMG,EAAiBH,EAAM,OAE7B,GAAI,CAACG,EAAe,QAAQ,iBAAiB,EAAG,OAEhD,MAAMC,EAAqBD,EAAe,KACpCE,EAAsBF,EAAe,MAE3CG,EAAsChB,EAAcc,EAAoBC,EAAqBZ,CAAqB,CACtH,CAAG,EAEDQ,EAAO,iBAAiB,SAAUD,GAAS,CAGzC,GAFAA,EAAM,eAAc,EAEhB,CAACO,EAAiCN,CAAM,EAAG,CAC7C,MAAM,wBAAwB,EAC9B,MACD,CAEDX,EAAa,WAAWG,CAAqB,EAE7CQ,EAAO,MAAK,CAChB,CAAG,CACH,CAAC"}